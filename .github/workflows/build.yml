name: Build Binaries

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: write  # This is required for creating releases and uploading assets

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Generate version number
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Use the tag name if this is a tag-triggered build
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # Generate a version based on date for scheduled or manual builds
            echo "VERSION=v$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          fi
          echo "Generated version: $(cat $GITHUB_OUTPUT | grep VERSION | cut -d= -f2)"

      - name: Update version in code
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          echo "Updating version to $VERSION"
          sed -i "s/AppVersion        = \"v[0-9.]*\"/AppVersion        = \"$VERSION\"/" types.go
          cat types.go | grep AppVersion

      - name: Initialize Go module and install dependencies
        run: |
          go mod tidy
          go get github.com/google/uuid

      - name: List repository contents
        run: |
          echo "Repository contents:"
          ls -la
          echo "Go files:"
          find . -name "*.go" -type f

      - name: List repository contents
        run: |
          echo "Repository contents:"
          ls -la
          echo "Go files:"
          find . -name "*.go" -type f

      - name: Build Windows binary
        run: |
          # Build with the files that actually exist
          GOOS=windows GOARCH=amd64 go build -o leo_venice_config.exe
          
          # Create a self-signed certificate for code signing
          # Note: This won't eliminate Windows security warnings but can help reduce them
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout codesign.key -out codesign.crt -subj "/CN=George Larson/O=Venice AI/C=US"
          openssl pkcs12 -export -out codesign.pfx -inkey codesign.key -in codesign.crt -passout pass:password
          
          # Install osslsigncode for signing Windows executables
          sudo apt-get update
          sudo apt-get install -y osslsigncode
          
          # Sign the executable
          osslsigncode sign -pkcs12 codesign.pfx -pass password -n "Venice AI for Brave Leo" -i "https://github.com/georgeglarson/venice-ai-for-brave-leo" -in leo_venice_config.exe -out leo_venice_config_signed.exe
          mv leo_venice_config_signed.exe leo_venice_config.exe
          
          # Create zip file
          zip -r leo_venice_config.exe.zip leo_venice_config.exe

      - name: Build macOS binary
        run: |
          GOOS=darwin GOARCH=amd64 go build -o leo_venice_config_mac
          chmod +x leo_venice_config_mac
          zip -r leo_venice_config_mac.zip leo_venice_config_mac

      - name: Build Linux binary
        run: |
          GOOS=linux GOARCH=amd64 go build -o leo_venice_config_linux
          chmod +x leo_venice_config_linux
          zip -r leo_venice_config_linux.zip leo_venice_config_linux

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: leo_venice_config_windows
          path: leo_venice_config.exe.zip

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: leo_venice_config_mac
          path: leo_venice_config_mac.zip

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: leo_venice_config_linux
          path: leo_venice_config_linux.zip

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate version number
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Use the tag name if this is a tag-triggered build
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # Generate a version based on date for scheduled or manual builds
            echo "VERSION=v$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          fi
          echo "Generated version: $(cat $GITHUB_OUTPUT | grep VERSION | cut -d= -f2)"

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Venice AI for Brave Leo ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            ./leo_venice_config_windows/leo_venice_config.exe.zip
            ./leo_venice_config_mac/leo_venice_config_mac.zip
            ./leo_venice_config_linux/leo_venice_config_linux.zip